name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Run Linter
      run: |
        flake8 .

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Collect Static Files
      run: |
        python manage.py collectstatic --noinput
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-django-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Deploy to EC2
      env:
        BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        USER_NAME: ${{ secrets.USER_NAME }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: my-django-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "$BASTION_PRIVATE_KEY" > bastion_key && chmod 600 bastion_key
        echo "$EC2_PRIVATE_KEY" > ec2_key && chmod 600 ec2_key
        ssh -o StrictHostKeyChecking=no -i bastion_key -J ${USER_NAME}@${BASTION_HOST} ${USER_NAME}@${PRIVATE_HOST} \
        "docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${ECR_REGISTRY} && \
         docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} && \
         docker stop my-django-app || true && \
         docker rm my-django-app || true && \
         docker run -d --name my-django-app -p 8000:8000 \
         -e DB_NAME='${DB_NAME}' \
         -e DB_USER='${DB_USER}' \
         -e DB_PASSWORD='${DB_PASSWORD}' \
         -e DB_HOST='${DB_HOST}' \
         ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} && \
         docker exec my-django-app python manage.py migrate"
    - name: Cleanup
      run: |
        rm bastion_key ec2_key