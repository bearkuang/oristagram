name: Django CI/CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.11']
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Run Linter
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create static and media directories
      run: |
        mkdir -p static
        mkdir -p media
    - name: Collect Static Files
      env:
        DJANGO_SETTINGS_MODULE: instaproject.settings
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DJANGO_DEBUG: 'False'
      run: python manage.py collectstatic --noinput
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-django-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build \
          --build-arg DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
          --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
          --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2
    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_BAS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    - name: Create key files
      run: |
        echo "${{ secrets.BASTION_PRIVATE_KEY }}" > bastion_key
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key
        chmod 600 bastion_key ec2_key
        echo "Key files created with permissions:"
        ls -l bastion_key ec2_key
    - name: Check if key files exist
      run: |
        echo "Bastion key file exists: $(test -f bastion_key && echo Yes || echo No)"
        echo "EC2 key file exists: $(test -f ec2_key && echo Yes || echo No)"
    - name: Check environment variables
      run: |
        echo "USER_NAME is set: ${{ secrets.USER_NAME != '' }}"
        echo "BASTION_HOST is set: ${{ secrets.BASTION_HOST != '' }}"
        echo "BASTION_PRIVATE_KEY length: ${#BASTION_PRIVATE_KEY}"
      env:
        BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}
    - name: Check and fix .ssh directory permissions
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} '
          ls -ld ~/.ssh
          chmod 700 ~/.ssh
          ls -ld ~/.ssh
        '
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
    - name: Transfer EC2 private key to bastion host
      run: |
        scp -o StrictHostKeyChecking=no -i bastion_key ec2_key ${USER_NAME}@${BASTION_HOST}:~/
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
    - name: Move key file to .ssh directory
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} '
          mv ~/ec2_key ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }}
          chmod 600 ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }}
        '
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
    - name: Verify key file transfer
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} '
          ls -l ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }}
        '
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
    - name: Check key file
      run: |
        ls -l bastion_key
        file bastion_key
        echo "First line of bastion_key:"
        head -n 1 bastion_key
    - name: Test Bastion Connection
      run: |
        ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i bastion_key ${{ secrets.USER_NAME }}@${{ secrets.BASTION_HOST }} 'echo "Bastion connection successful"'
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
    - name: Validate environment variables
      run: |
        [[ -z "$USER_NAME" ]] && echo "USER_NAME is not set" && exit 1
        [[ -z "$BASTION_HOST" ]] && echo "BASTION_HOST is not set" && exit 1
        [[ -z "$PRIVATE_HOST" ]] && echo "PRIVATE_HOST is not set" && exit 1
        [[ -z "$ECR_REGISTRY" ]] && echo "ECR_REGISTRY is not set" && exit 1
        echo "All required environment variables are set"
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
    
    - name: Test connection to Private EC2
      run: |
        ls -l bastion_key
        ssh -v -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} \
          "ls -l ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} && ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} 'echo Connection to Private EC2 successful'"
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
    
    - name: üê≥ Install Docker on Private EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
        INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}

    - name: üö® Test network connection
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            nc -zv ${DB_HOST} ${DB_PORT}
        INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
    
    - name: üì° Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${ECR_REGISTRY}
            docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            docker stop my-django-app || true
            docker rm my-django-app || true
            docker run -d --name my-django-app -p 8000:8000 \
              -e DJANGO_SETTINGS_MODULE=instaproject.settings \
              -e DJANGO_SECRET_KEY='${DJANGO_SECRET_KEY}' \
              -e DB_NAME='${DB_NAME}' \
              -e DB_USER='${DB_USER}' \
              -e DB_PASSWORD='${DB_PASSWORD}' \
              -e DB_HOST='${DB_HOST}' \
              -e DB_PORT='${DB_PORT}' \
              -e DJANGO_ENVIRONMENT='production' \
              ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} \
              sh -c "python manage.py migrate --no-input && gunicorn instaproject.wsgi:application --bind 0.0.0.0:8000"
        INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: my-django-app
        IMAGE_TAG: ${{ github.sha }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}

    - name: ‚úÖ Check container status
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
        docker ps | grep my-django-app
        INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
    
    - name: üíæ Test database connection
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            docker exec my-django-app python manage.py check --database default
          INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}

    - name: üìã Check container logs
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            docker logs my-django-app
          INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        
    - name: Check deployment status
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i bastion_key -J ${USER_NAME}@${BASTION_HOST} \
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2_key ${USER_NAME}@${PRIVATE_HOST} \
          'docker ps | grep my-django-app && echo "Deployment successful" || echo "Deployment failed"'
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}

    - name: üè• Health check
      run: |
        ssh -o StrictHostKeyChecking=no -i bastion_key ${USER_NAME}@${BASTION_HOST} << EOF
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.PRIVATE_KEY_NAME }} ubuntu@${PRIVATE_HOST} << 'INNEREOF'
            curl http://localhost:8000/health/  # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï†ÅÏ†àÌûà ÏàòÏ†ïÌïòÏÑ∏Ïöî
          INNEREOF
        EOF
      env:
        USER_NAME: ${{ secrets.USER_NAME }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
        
    - name: Remove Github Actions IP From Security Group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_BAS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    - name: Cleanup
      if: always()
      run: |
        rm -f bastion_key ec2_key
